extend type Query {
  """
  ✨ Look up a single `CaseRecord` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  caseRecord(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: CaseRecord_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: CaseRecord_FirstRow
  ): CaseRecord @fdc_generated(from: "CaseRecord", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `DistrictReference` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  districtReference(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: DistrictReference_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: DistrictReference_FirstRow
  ): DistrictReference @fdc_generated(from: "DistrictReference", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `EstablishmentReference` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  establishmentReference(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: EstablishmentReference_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: EstablishmentReference_FirstRow
  ): EstablishmentReference @fdc_generated(from: "EstablishmentReference", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `StateReference` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  stateReference(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: StateReference_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: StateReference_FirstRow
  ): StateReference @fdc_generated(from: "StateReference", purpose: QUERY_SINGLE)
  """
  ✨ List `CaseRecord` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  caseRecords(
    """
    Filter condition to narrow down the query results.
    """
    where: CaseRecord_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CaseRecord_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: CaseRecord_Having
  ): [CaseRecord!]! @fdc_generated(from: "CaseRecord", purpose: QUERY_MULTIPLE)
  """
  ✨ List `DistrictReference` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  districtReferences(
    """
    Filter condition to narrow down the query results.
    """
    where: DistrictReference_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [DistrictReference_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: DistrictReference_Having
  ): [DistrictReference!]! @fdc_generated(from: "DistrictReference", purpose: QUERY_MULTIPLE)
  """
  ✨ List `EstablishmentReference` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  establishmentReferences(
    """
    Filter condition to narrow down the query results.
    """
    where: EstablishmentReference_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [EstablishmentReference_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: EstablishmentReference_Having
  ): [EstablishmentReference!]! @fdc_generated(from: "EstablishmentReference", purpose: QUERY_MULTIPLE)
  """
  ✨ List `StateReference` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  stateReferences(
    """
    Filter condition to narrow down the query results.
    """
    where: StateReference_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [StateReference_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: StateReference_Having
  ): [StateReference!]! @fdc_generated(from: "StateReference", purpose: QUERY_MULTIPLE)
  """
  ✨ List `CaseRecord` objects and return selected fields, ordered by vector similarity between the `searchVector` field and `compare_embed`.
  (Alternatively, `compare` can be used if the input is a raw Vector.)
  """
  caseRecords_searchVector_similarity(
    """
    Vector to compare with the stored vectors.
    """
    compare: Vector

    """
    ✨ `_embed` server value variant of `compare` (Vector to compare with the stored vectors.)
    """
    compare_embed: Vector_Embed

    """
    Similarity method to use for vector comparison (defaults to `INNER_PRODUCT`).
    """
    method: VectorSimilarityMethod = INNER_PRODUCT

    """
    Threshold for distance comparison.
    """
    within: Float

    """
    Filter condition to apply when searching for similar vectors.
    """
    where: CaseRecord_Filter

    """
    Limit the number of similar vectors returned (defaults to 100 rows).
    """
    limit: Int = 100
  ): [CaseRecord!]! @fdc_generated(from: "CaseRecord.searchVector", purpose: QUERY_MULTIPLE_BY_SIMILARITY)
}
